/**
 * UTILIT√ÅRIO PARA C√ÅLCULO DE DATAS DE LAN√áAMENTOS RECORRENTES
 * 
 * Garante que lan√ßamentos recorrentes sempre sejam criados para datas futuras
 */

export interface RecurringDateOptions {
  dayOfMonth: number;
  startDate?: Date;
  frequency?: 'monthly' | 'fixed-count' | 'monthly-duration';
}

/**
 * Calcula a pr√≥xima data v√°lida para um lan√ßamento recorrente
 * @param options Op√ß√µes do lan√ßamento recorrente
 * @returns Pr√≥xima data v√°lida (sempre no futuro)
 */
export function calculateNextRecurringDate(options: RecurringDateOptions): Date {
  const { dayOfMonth, startDate } = options;
  const today = new Date();
  const currentDay = today.getDate();
  const currentMonth = today.getMonth();
  const currentYear = today.getFullYear();
  
  let nextDate: Date;
  
  // Se h√° uma data de in√≠cio espec√≠fica e ela √© futura, usar ela
  if (startDate && startDate > today) {
    nextDate = new Date(startDate);
    nextDate.setDate(dayOfMonth);
  } else {
    // Calcular baseado no m√™s atual
    nextDate = new Date(currentYear, currentMonth, dayOfMonth);
    
    // Se o dia j√° passou no m√™s atual, ir para o pr√≥ximo m√™s
    if (dayOfMonth <= currentDay) {
      nextDate.setMonth(nextDate.getMonth() + 1);
      console.log(`üìÖ CORRE√á√ÉO: Dia ${dayOfMonth} j√° passou este m√™s, pr√≥xima execu√ß√£o em ${nextDate.toLocaleDateString()}`);
    }
  }
  
  // Ajustar para meses que n√£o t√™m o dia especificado (ex: 31 em fevereiro)
  if (nextDate.getDate() !== dayOfMonth) {
    // Usar o √∫ltimo dia do m√™s
    nextDate = new Date(nextDate.getFullYear(), nextDate.getMonth() + 1, 0);
    console.log(`üìÖ AJUSTE: Dia ${dayOfMonth} n√£o existe no m√™s, usando √∫ltimo dia: ${nextDate.getDate()}`);
  }
  
  // Garantir que a data √© futura
  if (nextDate <= today) {
    nextDate.setMonth(nextDate.getMonth() + 1);
    nextDate = adjustDayOfMonth(nextDate, dayOfMonth);
    console.log(`üìÖ SEGURAN√áA: Data ainda no passado, avan√ßando para ${nextDate.toLocaleDateString()}`);
  }
  
  return nextDate;
}

/**
 * Ajusta o dia do m√™s para uma data espec√≠fica
 * @param date Data base
 * @param dayOfMonth Dia desejado
 * @returns Data ajustada
 */
function adjustDayOfMonth(date: Date, dayOfMonth: number): Date {
  const adjusted = new Date(date.getFullYear(), date.getMonth(), dayOfMonth);
  
  // Se o dia n√£o existe no m√™s, usar o √∫ltimo dia
  if (adjusted.getDate() !== dayOfMonth) {
    return new Date(adjusted.getFullYear(), adjusted.getMonth() + 1, 0);
  }
  
  return adjusted;
}

/**
 * Verifica se uma data de lan√ßamento recorrente √© v√°lida (futura)
 * @param date Data a verificar
 * @returns true se a data √© v√°lida
 */
export function isValidRecurringDate(date: Date): boolean {
  const today = new Date();
  const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
  return date >= todayStart;
}

/**
 * Calcula todas as pr√≥ximas execu√ß√µes de um lan√ßamento recorrente
 * @param options Op√ß√µes do lan√ßamento
 * @param monthsAhead Quantos meses √† frente calcular
 * @returns Array de datas futuras
 */
export function calculateUpcomingRecurringDates(
  options: RecurringDateOptions, 
  monthsAhead: number = 12
): Date[] {
  const dates: Date[] = [];
  let currentDate = calculateNextRecurringDate(options);
  
  for (let i = 0; i < monthsAhead; i++) {
    dates.push(new Date(currentDate));
    
    // Avan√ßar para o pr√≥ximo m√™s
    currentDate.setMonth(currentDate.getMonth() + 1);
    currentDate = adjustDayOfMonth(currentDate, options.dayOfMonth);
  }
  
  return dates;
}

/**
 * Formata uma data de lan√ßamento recorrente para exibi√ß√£o
 * @param date Data
 * @returns String formatada
 */
export function formatRecurringDate(date: Date): string {
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  if (date.toDateString() === today.toDateString()) {
    return 'Hoje';
  } else if (date.toDateString() === tomorrow.toDateString()) {
    return 'Amanh√£';
  } else {
    return date.toLocaleDateString('pt-BR');
  }
}