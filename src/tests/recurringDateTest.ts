/**
 * TESTE PARA CORRE√á√ÉO DE DATAS DE LAN√áAMENTOS RECORRENTES
 * 
 * Verifica se lan√ßamentos recorrentes s√£o criados apenas para datas futuras
 */

import { calculateNextRecurringDate, isValidRecurringDate, calculateUpcomingRecurringDates } from '../utils/recurringDateCalculator';

export function testRecurringDateCorrection() {
  console.log('üß™ TESTE: Corre√ß√£o de datas de lan√ßamentos recorrentes');
  
  const today = new Date();
  const currentDay = today.getDate();
  
  // Teste 1: Dia que j√° passou no m√™s atual
  console.log('\nüìÖ Teste 1: Dia que j√° passou');
  const pastDay = Math.max(1, currentDay - 5); // 5 dias atr√°s
  const nextDateForPastDay = calculateNextRecurringDate({ dayOfMonth: pastDay });
  
  console.log(`Hoje: ${today.toLocaleDateString()}`);
  console.log(`Dia solicitado: ${pastDay}`);
  console.log(`Pr√≥xima execu√ß√£o: ${nextDateForPastDay.toLocaleDateString()}`);
  console.log(`√â v√°lida (futura): ${isValidRecurringDate(nextDateForPastDay)}`);
  
  // Teste 2: Dia que ainda n√£o chegou no m√™s atual
  console.log('\nüìÖ Teste 2: Dia que ainda n√£o chegou');
  const futureDay = Math.min(31, currentDay + 5); // 5 dias √† frente
  const nextDateForFutureDay = calculateNextRecurringDate({ dayOfMonth: futureDay });
  
  console.log(`Hoje: ${today.toLocaleDateString()}`);
  console.log(`Dia solicitado: ${futureDay}`);
  console.log(`Pr√≥xima execu√ß√£o: ${nextDateForFutureDay.toLocaleDateString()}`);
  console.log(`√â v√°lida (futura): ${isValidRecurringDate(nextDateForFutureDay)}`);
  
  // Teste 3: Dia 31 em m√™s que n√£o tem 31 dias
  console.log('\nüìÖ Teste 3: Dia 31 (ajuste autom√°tico)');
  const nextDateFor31 = calculateNextRecurringDate({ dayOfMonth: 31 });
  
  console.log(`Dia solicitado: 31`);
  console.log(`Pr√≥xima execu√ß√£o: ${nextDateFor31.toLocaleDateString()}`);
  console.log(`Dia ajustado: ${nextDateFor31.getDate()}`);
  console.log(`√â v√°lida (futura): ${isValidRecurringDate(nextDateFor31)}`);
  
  // Teste 4: Pr√≥ximas 6 execu√ß√µes
  console.log('\nüìÖ Teste 4: Pr√≥ximas 6 execu√ß√µes para dia 15');
  const upcomingDates = calculateUpcomingRecurringDates({ dayOfMonth: 15 }, 6);
  
  upcomingDates.forEach((date, index) => {
    console.log(`${index + 1}¬™ execu√ß√£o: ${date.toLocaleDateString()}`);
  });
  
  // Teste 5: Valida√ß√£o de datas
  console.log('\nüìÖ Teste 5: Valida√ß√£o de datas');
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  console.log(`Ontem √© v√°lida: ${isValidRecurringDate(yesterday)}`);
  console.log(`Hoje √© v√°lida: ${isValidRecurringDate(today)}`);
  console.log(`Amanh√£ √© v√°lida: ${isValidRecurringDate(tomorrow)}`);
  
  console.log('\n‚úÖ TESTE CONCLU√çDO: Verifica√ß√£o de datas de lan√ßamentos recorrentes');
  
  return {
    pastDayTest: isValidRecurringDate(nextDateForPastDay),
    futureDayTest: isValidRecurringDate(nextDateForFutureDay),
    day31Test: isValidRecurringDate(nextDateFor31),
    allUpcomingValid: upcomingDates.every(date => isValidRecurringDate(date))
  };
}

// Executar teste automaticamente em desenvolvimento
if (process.env.NODE_ENV === 'development') {
  // Executar ap√≥s um pequeno delay para n√£o interferir com o carregamento
  setTimeout(() => {
    try {
      const results = testRecurringDateCorrection();
      console.log('\nüìä RESULTADOS DOS TESTES:', results);
      
      if (Object.values(results).every(Boolean)) {
        console.log('‚úÖ TODOS OS TESTES PASSARAM!');
      } else {
        console.log('‚ùå ALGUNS TESTES FALHARAM!');
      }
    } catch (error) {
      console.error('‚ùå ERRO NO TESTE:', error);
    }
  }, 2000);
}