/**
 * Executor Principal de Todos os Testes
 * Coordena execu√ß√£o de testes unit√°rios e de integra√ß√£o
 */

import { FinancialLogicTester, TestSuite } from './FinancialLogicTester';
import { IntegrationTester } from './IntegrationTester';
import { validateAllFixes, FixValidationResult } from './validateFixes';

export interface TestReport {
  timestamp: string;
  unitTests: TestSuite[];
  integrationTests: TestSuite[];
  fixValidation: FixValidationResult[];
  summary: {
    totalTests: number;
    totalPassed: number;
    totalFailed: number;
    successRate: number;
    criticalBugs: string[];
    recommendations: string[];
    fixesValidated: number;
    fixesPassed: number;
  };
  performance: {
    executionTime: number;
    testsPerSecond: number;
  };
}

export class TestRunner {
  private unitTester: FinancialLogicTester;
  private integrationTester: IntegrationTester;

  constructor() {
    this.unitTester = new FinancialLogicTester();
    this.integrationTester = new IntegrationTester();
  }

  /**
   * Executa todos os testes e gera relat√≥rio completo
   */
  public async runAllTests(): Promise<TestReport> {
    console.log('üöÄ INICIANDO BATERIA COMPLETA DE TESTES');
    console.log('=====================================');
    
    const startTime = performance.now();

    try {
      // 1. Testes Unit√°rios
      console.log('\nüìã Executando testes unit√°rios...');
      const unitTests = this.unitTester.runAllTests();

      // 2. Testes de Integra√ß√£o
      console.log('\nüîÑ Executando testes de integra√ß√£o...');
      const integrationTests = this.integrationTester.runIntegrationTests();

      // 3. Valida√ß√£o de Corre√ß√µes
      console.log('\nüîß Validando corre√ß√µes implementadas...');
      const fixValidation = validateAllFixes();

      const endTime = performance.now();
      const executionTime = endTime - startTime;

      // 4. Gerar Relat√≥rio
      const report = this.generateReport(unitTests, integrationTests, fixValidation, executionTime);

      // 4. An√°lise de Bugs Cr√≠ticos
      this.analyzeCriticalBugs(report);

      // 5. Recomenda√ß√µes
      this.generateRecommendations(report);

      console.log('\n‚úÖ BATERIA DE TESTES CONCLU√çDA');
      console.log(`‚è±Ô∏è Tempo de execu√ß√£o: ${executionTime.toFixed(2)}ms`);
      
      return report;

    } catch (error) {
      console.error('üí• ERRO CR√çTICO durante execu√ß√£o dos testes:', error);
      throw error;
    }
  }

  /**
   * Gera relat√≥rio consolidado
   */
  private generateReport(
    unitTests: TestSuite[], 
    integrationTests: TestSuite[], 
    fixValidation: FixValidationResult[],
    executionTime: number
  ): TestReport {
    const allSuites = [...unitTests, ...integrationTests];
    
    const totalTests = allSuites.reduce((sum, suite) => sum + suite.total, 0);
    const totalPassed = allSuites.reduce((sum, suite) => sum + suite.passed, 0);
    const totalFailed = allSuites.reduce((sum, suite) => sum + suite.failed, 0);
    const successRate = totalTests > 0 ? (totalPassed / totalTests) * 100 : 0;

    const fixesPassed = fixValidation.filter(f => f.passed).length;
    const fixesValidated = fixValidation.length;

    return {
      timestamp: new Date().toISOString(),
      unitTests,
      integrationTests,
      fixValidation,
      summary: {
        totalTests,
        totalPassed,
        totalFailed,
        successRate,
        criticalBugs: [],
        recommendations: [],
        fixesValidated,
        fixesPassed
      },
      performance: {
        executionTime,
        testsPerSecond: totalTests / (executionTime / 1000)
      }
    };
  }

  /**
   * Analisa bugs cr√≠ticos encontrados
   */
  private analyzeCriticalBugs(report: TestReport): void {
    const criticalBugs: string[] = [];
    const allSuites = [...report.unitTests, ...report.integrationTests];

    allSuites.forEach(suite => {
      suite.results.filter(r => !r.passed).forEach(result => {
        // Identifica bugs cr√≠ticos baseado no tipo de falha
        if (this.isCriticalBug(suite.suiteName, result.testName, result.expected, result.actual)) {
          criticalBugs.push(`üö® CR√çTICO: ${suite.suiteName} - ${result.testName}`);
        } else {
          criticalBugs.push(`‚ö†Ô∏è ${suite.suiteName} - ${result.testName}`);
        }
      });
    });

    report.summary.criticalBugs = criticalBugs;

    if (criticalBugs.length > 0) {
      console.log('\nüö® BUGS ENCONTRADOS:');
      criticalBugs.forEach((bug, index) => {
        console.log(`   ${index + 1}. ${bug}`);
      });
    }
  }

  /**
   * Determina se um bug √© cr√≠tico
   */
  private isCriticalBug(suiteName: string, testName: string, expected: any, actual: any): boolean {
    // Bugs cr√≠ticos que podem causar perda de dinheiro ou dados
    const criticalPatterns = [
      'C√°lculo de Saldo',
      'Propaga√ß√£o de Saldo',
      'Saldo Final',
      'Overflow',
      'Underflow',
      'Precis√£o Decimal'
    ];

    const isCriticalSuite = criticalPatterns.some(pattern => 
      suiteName.includes(pattern) || testName.includes(pattern)
    );

    // Diferen√ßas grandes em valores monet√°rios s√£o cr√≠ticas
    if (typeof expected === 'number' && typeof actual === 'number') {
      const difference = Math.abs(expected - actual);
      if (difference > 0.01) { // Mais de 1 centavo de diferen√ßa
        return true;
      }
    }

    return isCriticalSuite;
  }

  /**
   * Gera recomenda√ß√µes baseadas nos resultados
   */
  private generateRecommendations(report: TestReport): void {
    const recommendations: string[] = [];
    const { successRate, totalFailed } = report.summary;

    if (successRate < 95) {
      recommendations.push('üîß Taxa de sucesso baixa - Revisar implementa√ß√£o geral');
    }

    if (totalFailed > 0) {
      recommendations.push('üêõ Bugs encontrados - Priorizar corre√ß√µes antes do deploy');
    }

    // An√°lise por categoria
    const failedSuites = [...report.unitTests, ...report.integrationTests]
      .filter(suite => suite.failed > 0);

    failedSuites.forEach(suite => {
      switch (suite.suiteName) {
        case 'C√°lculo de Saldo':
          recommendations.push('üí∞ Revisar f√≥rmula de c√°lculo de saldo em currencyUtils.ts');
          break;
        case 'Parsing de Moeda':
          recommendations.push('üí± Melhorar parsing de valores monet√°rios');
          break;
        case 'Propaga√ß√£o de Saldo':
          recommendations.push('üîó Verificar l√≥gica de propaga√ß√£o entre per√≠odos');
          break;
        case 'Transa√ß√µes Recorrentes':
          recommendations.push('üîÑ Revisar processamento de transa√ß√µes recorrentes');
          break;
        case 'Integridade de Dados':
          recommendations.push('üõ°Ô∏è Fortalecer valida√ß√µes de seguran√ßa');
          break;
      }
    });

    // Recomenda√ß√µes de performance
    if (report.performance.testsPerSecond < 100) {
      recommendations.push('‚ö° Performance baixa - Otimizar algoritmos');
    }

    report.summary.recommendations = recommendations;

    if (recommendations.length > 0) {
      console.log('\nüí° RECOMENDA√á√ïES:');
      recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
      });
    }
  }

  /**
   * Executa apenas testes cr√≠ticos (para CI/CD)
   */
  public async runCriticalTests(): Promise<boolean> {
    console.log('üéØ Executando apenas testes cr√≠ticos...');
    
    const report = await this.runAllTests();
    const criticalFailures = report.summary.criticalBugs.filter(bug => 
      bug.includes('üö® CR√çTICO')
    );

    if (criticalFailures.length > 0) {
      console.log('‚ùå TESTES CR√çTICOS FALHARAM - DEPLOY BLOQUEADO');
      return false;
    }

    console.log('‚úÖ TODOS OS TESTES CR√çTICOS PASSARAM');
    return true;
  }

  /**
   * Executa testes de regress√£o
   */
  public async runRegressionTests(): Promise<TestReport> {
    console.log('üîÑ Executando testes de regress√£o...');
    
    // Para testes de regress√£o, executamos todos os testes
    // mas com foco em cen√°rios que j√° falharam antes
    return this.runAllTests();
  }

  /**
   * Salva relat√≥rio em arquivo
   */
  public saveReport(report: TestReport, filename?: string): void {
    const fileName = filename || `test-report-${Date.now()}.json`;
    
    try {
      const reportJson = JSON.stringify(report, null, 2);
      
      // Em um ambiente real, salvaria em arquivo
      // Para este exemplo, apenas logamos
      console.log(`üíæ Relat√≥rio salvo: ${fileName}`);
      console.log(`üìä Tamanho do relat√≥rio: ${reportJson.length} caracteres`);
      
      // Salvar no localStorage para visualiza√ß√£o
      localStorage.setItem('lastTestReport', reportJson);
      
    } catch (error) {
      console.error('‚ùå Erro ao salvar relat√≥rio:', error);
    }
  }

  /**
   * Carrega √∫ltimo relat√≥rio salvo
   */
  public loadLastReport(): TestReport | null {
    try {
      const saved = localStorage.getItem('lastTestReport');
      if (saved) {
        return JSON.parse(saved);
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar relat√≥rio:', error);
    }
    return null;
  }

  /**
   * Compara dois relat√≥rios para detectar regress√µes
   */
  public compareReports(current: TestReport, previous: TestReport): {
    improved: string[];
    regressed: string[];
    new: string[];
  } {
    const comparison = {
      improved: [] as string[],
      regressed: [] as string[],
      new: [] as string[]
    };

    // Comparar taxa de sucesso geral
    if (current.summary.successRate > previous.summary.successRate) {
      comparison.improved.push(`Taxa de sucesso: ${previous.summary.successRate.toFixed(1)}% ‚Üí ${current.summary.successRate.toFixed(1)}%`);
    } else if (current.summary.successRate < previous.summary.successRate) {
      comparison.regressed.push(`Taxa de sucesso: ${previous.summary.successRate.toFixed(1)}% ‚Üí ${current.summary.successRate.toFixed(1)}%`);
    }

    // Comparar bugs cr√≠ticos
    const currentCritical = current.summary.criticalBugs.length;
    const previousCritical = previous.summary.criticalBugs.length;
    
    if (currentCritical < previousCritical) {
      comparison.improved.push(`Bugs cr√≠ticos: ${previousCritical} ‚Üí ${currentCritical}`);
    } else if (currentCritical > previousCritical) {
      comparison.regressed.push(`Bugs cr√≠ticos: ${previousCritical} ‚Üí ${currentCritical}`);
    }

    return comparison;
  }
}