/**
 * PAINEL ADMINISTRATIVO RETRÁTIL
 * 
 * Interface discreta e elegante para funcionalidades administrativas
 */

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { 
  Shield, 
  Eye, 
  EyeOff, 
  Settings, 
  X, 
  Lock, 
  Unlock,
  AlertTriangle,
  CheckCircle,
  Timer,
  Activity
} from 'lucide-react';
import { useToast } from './ui/use-toast';
import { logger } from '../utils/performanceLogger';
import { 
  authenticateAdmin, 
  isAdminSessionValid, 
  checkRateLimit, 
  getSecurityStats,
  validatePasswordStrength,
  applyCSP
} from '../utils/securitySystem';

interface CollapsibleAdminPanelProps {
  onClearData: () => void;
  onSystemCheck: () => void;
  onBackup?: () => void;
  onRestore?: () => void;
}\n\nconst AUTO_COLLAPSE_TIMEOUT = 30000; // 30 segundos\n\nexport const CollapsibleAdminPanel: React.FC<CollapsibleAdminPanelProps> = ({\n  onClearData,\n  onSystemCheck,\n  onBackup,\n  onRestore\n}) => {\n  // Estados principais\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  \n  // Estados de segurança\n  const [securityStats, setSecurityStats] = useState(getSecurityStats());\n  const [passwordStrength, setPasswordStrength] = useState({ isStrong: false, score: 0, feedback: [] });\n  \n  // Timers\n  const collapseTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const securityUpdateTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const lastActivityRef = useRef<number>(Date.now());\n  \n  const { toast } = useToast();\n\n  // Aplicar CSP na inicialização\n  useEffect(() => {\n    applyCSP();\n  }, []);\n\n  // Atualizar estatísticas de segurança periodicamente\n  useEffect(() => {\n    const updateSecurityStats = () => {\n      setSecurityStats(getSecurityStats());\n    };\n\n    securityUpdateTimerRef.current = setInterval(updateSecurityStats, 1000);\n    \n    return () => {\n      if (securityUpdateTimerRef.current) {\n        clearInterval(securityUpdateTimerRef.current);\n      }\n    };\n  }, []);\n\n  // Verificar sessão administrativa\n  useEffect(() => {\n    if (isAuthenticated && !isAdminSessionValid()) {\n      handleLogout();\n      toast({\n        title: \"Sessão Expirada\",\n        description: \"Sessão administrativa expirada\",\n        variant: \"destructive\"\n      });\n    }\n  }, [isAuthenticated]);\n\n  // Auto-colapso por inatividade\n  useEffect(() => {\n    if (isExpanded) {\n      resetCollapseTimer();\n    }\n    \n    return () => {\n      if (collapseTimerRef.current) {\n        clearTimeout(collapseTimerRef.current);\n      }\n    };\n  }, [isExpanded]);\n\n  // Reset timer de colapso\n  const resetCollapseTimer = useCallback(() => {\n    if (collapseTimerRef.current) {\n      clearTimeout(collapseTimerRef.current);\n    }\n    \n    collapseTimerRef.current = setTimeout(() => {\n      if (isExpanded && !isAuthenticated) {\n        setIsExpanded(false);\n        logger.debug('ADMIN_PANEL', 'Auto-collapsed due to inactivity');\n      }\n    }, AUTO_COLLAPSE_TIMEOUT);\n  }, [isExpanded, isAuthenticated]);\n\n  // Registrar atividade\n  const recordActivity = useCallback(() => {\n    lastActivityRef.current = Date.now();\n    resetCollapseTimer();\n  }, [resetCollapseTimer]);\n\n  // Toggle expansão\n  const toggleExpansion = useCallback(() => {\n    setIsExpanded(prev => {\n      const newState = !prev;\n      logger.info('ADMIN_PANEL', newState ? 'Panel expanded' : 'Panel collapsed');\n      return newState;\n    });\n    recordActivity();\n  }, [recordActivity]);\n\n  // Validar força da senha em tempo real\n  useEffect(() => {\n    if (password) {\n      setPasswordStrength(validatePasswordStrength(password));\n    } else {\n      setPasswordStrength({ isStrong: false, score: 0, feedback: [] });\n    }\n  }, [password]);\n\n  // Autenticação\n  const handleAuthentication = useCallback(async () => {\n    recordActivity();\n    \n    if (!checkRateLimit()) {\n      toast({\n        title: \"Acesso Bloqueado\",\n        description: `Muitas tentativas falhadas. Tente novamente em ${Math.ceil(securityStats.lockoutRemaining / 1000)}s`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const isValid = authenticateAdmin(password);\n    \n    if (isValid) {\n      setIsAuthenticated(true);\n      setPassword('');\n      \n      toast({\n        title: \"Autenticado\",\n        description: \"Acesso administrativo concedido\",\n        variant: \"default\"\n      });\n      \n      logger.info('ADMIN_PANEL', 'Admin authentication successful');\n    } else {\n      toast({\n        title: \"Senha Incorreta\",\n        description: `Tentativa ${securityStats.failedAttempts + 1} de 3`,\n        variant: \"destructive\"\n      });\n      \n      // Limpar senha após falha\n      setPassword('');\n      setShowPassword(false);\n    }\n  }, [password, securityStats, recordActivity, toast]);\n\n  // Logout\n  const handleLogout = useCallback(() => {\n    setIsAuthenticated(false);\n    setPassword('');\n    setShowPassword(false);\n    logger.info('ADMIN_PANEL', 'Admin logged out');\n  }, []);\n\n  // Fechar painel\n  const handleClose = useCallback(() => {\n    setIsExpanded(false);\n    if (isAuthenticated) {\n      handleLogout();\n    }\n  }, [isAuthenticated, handleLogout]);\n\n  // Handlers para ações administrativas\n  const handleAction = useCallback((action: () => void, actionName: string) => {\n    recordActivity();\n    logger.info('ADMIN_PANEL', `Executing admin action: ${actionName}`);\n    action();\n  }, [recordActivity]);\n\n  // Renderizar ícone colapsado\n  if (!isExpanded) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Button\n          onClick={toggleExpansion}\n          size=\"sm\"\n          variant=\"outline\"\n          className=\"w-10 h-10 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 bg-white/90 backdrop-blur-sm border-gray-200 hover:border-gray-300\"\n          title=\"Painel Administrativo\"\n        >\n          <Settings className=\"w-4 h-4 text-gray-600\" />\n        </Button>\n      </div>\n    );\n  }\n\n  // Renderizar painel expandido\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      <Card className=\"w-80 shadow-2xl border-gray-200 bg-white/95 backdrop-blur-sm animate-in slide-in-from-bottom-2 duration-300\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-blue-600\" />\n              <CardTitle className=\"text-lg\">Admin Panel</CardTitle>\n            </div>\n            <Button\n              onClick={handleClose}\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"w-8 h-8 p-0 hover:bg-gray-100\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          \n          {/* Indicadores de status */}\n          <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n            <div className=\"flex items-center gap-1\">\n              {securityStats.isLocked ? (\n                <Lock className=\"w-3 h-3 text-red-500\" />\n              ) : (\n                <Unlock className=\"w-3 h-3 text-green-500\" />\n              )}\n              <span>{securityStats.isLocked ? 'Bloqueado' : 'Disponível'}</span>\n            </div>\n            \n            {securityStats.sessionActive && (\n              <div className=\"flex items-center gap-1\">\n                <Activity className=\"w-3 h-3 text-green-500\" />\n                <span>Sessão Ativa</span>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {!isAuthenticated ? (\n            <div className=\"space-y-3\">\n              {/* Campo de senha */}\n              <div className=\"space-y-2\">\n                <div className=\"relative\">\n                  <Input\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Senha administrativa\"\n                    value={password}\n                    onChange={(e) => {\n                      setPassword(e.target.value);\n                      recordActivity();\n                    }}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        handleAuthentication();\n                      }\n                    }}\n                    disabled={securityStats.isLocked}\n                    className=\"pr-10\"\n                  />\n                  <Button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"absolute right-1 top-1 h-8 w-8 p-0\"\n                    disabled={securityStats.isLocked}\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n                \n                {/* Indicador de força da senha */}\n                {password && (\n                  <div className=\"text-xs\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-2 h-2 rounded-full ${\n                        passwordStrength.score >= 80 ? 'bg-green-500' :\n                        passwordStrength.score >= 60 ? 'bg-yellow-500' :\n                        'bg-red-500'\n                      }`} />\n                      <span className=\"text-gray-600\">\n                        Força: {passwordStrength.score}%\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              {/* Status de bloqueio */}\n              {securityStats.isLocked && (\n                <div className=\"flex items-center gap-2 p-2 bg-red-50 border border-red-200 rounded text-xs text-red-700\">\n                  <AlertTriangle className=\"w-4 h-4\" />\n                  <span>\n                    Bloqueado por {Math.ceil(securityStats.lockoutRemaining / 1000)}s\n                  </span>\n                </div>\n              )}\n              \n              {/* Tentativas falhadas */}\n              {securityStats.failedAttempts > 0 && !securityStats.isLocked && (\n                <div className=\"text-xs text-orange-600\">\n                  Tentativas falhadas: {securityStats.failedAttempts}/3\n                </div>\n              )}\n              \n              <Button\n                onClick={handleAuthentication}\n                disabled={!password || securityStats.isLocked}\n                className=\"w-full\"\n                size=\"sm\"\n              >\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Autenticar\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {/* Status autenticado */}\n              <div className=\"flex items-center gap-2 p-2 bg-green-50 border border-green-200 rounded text-xs text-green-700\">\n                <CheckCircle className=\"w-4 h-4\" />\n                <span>Autenticado com sucesso</span>\n              </div>\n              \n              {/* Ações administrativas */}\n              <div className=\"space-y-2\">\n                <Button\n                  onClick={() => handleAction(onSystemCheck, 'system_check')}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full justify-start\"\n                >\n                  <Activity className=\"w-4 h-4 mr-2\" />\n                  Verificar Sistema\n                </Button>\n                \n                {onBackup && (\n                  <Button\n                    onClick={() => handleAction(onBackup, 'backup')}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                  >\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Fazer Backup\n                  </Button>\n                )}\n                \n                {onRestore && (\n                  <Button\n                    onClick={() => handleAction(onRestore, 'restore')}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full justify-start\"\n                  >\n                    <Timer className=\"w-4 h-4 mr-2\" />\n                    Restaurar Dados\n                  </Button>\n                )}\n                \n                <Button\n                  onClick={() => handleAction(onClearData, 'clear_data')}\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  className=\"w-full justify-start\"\n                >\n                  <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                  Limpar Dados\n                </Button>\n              </div>\n              \n              <Button\n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full\"\n              >\n                Sair\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CollapsibleAdminPanel;